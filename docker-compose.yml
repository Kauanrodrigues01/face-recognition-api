services:
  postgres:
    image: postgres:17.2-alpine
    container_name: face_recognition_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: face_recognition
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - face_recognition_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Sem exposição de porta externa - apenas acessível internamente

  postgres_test:
    image: postgres:17.2-alpine
    container_name: face_recognition_db_test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: face_recognition_test
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - face_recognition_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Sem exposição de porta externa - apenas acessível internamente

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USE_GPU: "${USE_GPU:-false}"
    container_name: face-recognition-app
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      # Project
      PROJECT_NAME: "${PROJECT_NAME:-Face Recognition API}"
      VERSION: "${VERSION:-0.1.0}"
      DESCRIPTION: "${DESCRIPTION:-API for face recognition with PostgreSQL backend}"
      API_V1_STR: "${API_V1_STR:-/api/v1}"

      # Database - Connect to containers by their service names
      DATABASE_URL: "postgresql+asyncpg://postgres:password@face_recognition_db:5432/face_recognition"
      DATABASE_TEST_URL: "postgresql+asyncpg://postgres:password@face_recognition_db_test:5432/face_recognition_test"

      # Security - IMPORTANT: Change these in production!
      SECRET_KEY: "${SECRET_KEY:-09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7}"
      ALGORITHM: "${ALGORITHM:-HS256}"
      ACCESS_TOKEN_EXPIRE_MINUTES: "${ACCESS_TOKEN_EXPIRE_MINUTES:-30}"

      # Face Recognition Encryption - IMPORTANT: Change in production!
      FACE_ENCRYPTION_KEY: "${FACE_ENCRYPTION_KEY:-YgEeuOA6sQMntCX_pvHRfEBdhyyezbBuqEmJgzvHb0w=}"

      # CORS
      BACKEND_CORS_ORIGINS: "${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:8000}"

    volumes:
      # Mount InsightFace models directory to persist models between container restarts
      - insightface-models:/root/.insightface

    networks:
      - face_recognition_network

    depends_on:
      postgres:
        condition: service_healthy
      postgres_test:
        condition: service_healthy

    command: >
      sh -c "cd /app && alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000"

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  insightface-models:
    driver: local

networks:
  face_recognition_network:
    driver: bridge
